// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// BUMPMAPPING 2D VERTEX PROGRAM ////////////
///////////////////////////////////////////////////////

vec4 position = gl_Vertex;
vec3 normal = gl_Normal;
vec3 uv = gl_MultiTexCoord0.xyz;


out vec4 vColor;
out vec3 vUv;
out vec3 vLightDir;
out vec2 vScreenPos;

uniform mat4 worldViewProj;
uniform vec3 LightPos;
uniform float LightRadius;
uniform vec4 LightColor;

void main()
{
	vec3 L;

	//Get the direction of the light and normalize it
	vLightDir.xy = position.xy - LightPos.xy;
	vScreenPos = (vLightDir.xy + (LightRadius) )/ (LightRadius*2.0);
	//rotate the light to texture (tangent) space. Normal x=cos(angle) y = sin(angle)
	vec2 TempLight = vLightDir.xy;
	vLightDir.x = normal.x*TempLight.x + normal.y*TempLight.y;
	vLightDir.y = normal.x*TempLight.y - normal.y*TempLight.x;
	vLightDir.x *= normal.z/abs(normal.z);
	vLightDir.y *= abs(normal.z)-2.0;

	vLightDir.z = -LightPos.z;
	vLightDir = normalize(vLightDir);

	gl_Position = worldViewProj * position;

	vColor = clamp(LightColor, vec4(0.0), vec4(1.0));
	vUv = uv;
}
