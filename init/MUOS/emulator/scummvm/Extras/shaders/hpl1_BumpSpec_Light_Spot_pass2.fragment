// Copyright 2006-2010 (C) - Frictional Games
//
// This file is part of HPL1 Engine
//
// For conditions of distribution and use, see copyright notice in LICENSE-shaders
//

///////////////////////////////////////////////////////
/// DIFFUSE SPOTLIGHTING FRAGMENT PROGRAM /////////////
///////////////////////////////////////////////////////

in vec4 vLightColor;
in vec2 vUv;
in vec3 vLightDir;
in vec3 vHalfVec;
in vec4 vSpotlightUv;

OUTPUT

uniform sampler2D tex0; //diffuseMap
uniform sampler2D tex1; //normalMap
uniform samplerCube tex2; //normalCubeMap
uniform sampler2D tex3; //spotlightMap

void main()
{
	vec3 diffuse = texture(tex0, vUv).xyz;

	vec4 bumpVec = texture(tex1, vUv);
	bumpVec.xyz = (2.0*bumpVec.xyz)-vec3(1.0);

	vec3 lightVec = (2.0*textureCube(tex2,vLightDir)-vec4(1.0)).xyz;
	vHalfVec = (2.0*textureCube(tex2,vHalfVec)-vec4(1.0)).xyz;

	vec4 spotColor = texture(tex3, vSpotlightUv.xy / vSpotlightUv.w); 

	float specular = clamp(dot(vHalfVec, bumpVec.xyz), 0.0, 1.0);
	specular = pow(specular, 16.0) * vLightColor.w * clamp(bumpVec.w, 0.0, 1.0) * clamp(spotColor.w, 0.0, 1.0);

	outColor.xyz = diffuse * dot(lightVec, bumpVec.xyz) * vLightColor.xyz * spotColor.xyz +
					specular;
}
